{"version":3,"sources":["views/ATMDisplay.js","views/DispenseDetailDisplay.js","views/ATMDispenser.js","App.js","serviceWorker.js","index.js"],"names":["ATMDisplay","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","amount","onChangeAmount","bind","assertThisInitialized","getMoney","handleKeyDown","e","target","value","test","setState","alert","key","react_default","a","createElement","className","type","onChange","placeholder","onKeyDown","onClick","PureComponent","DispenseDetailDisplay","denominations","1","2","5","10","20","50","100","200","500","2000","totalDispensedNotes","parseInt","denominationsAvailable","keys","sort","b","i","length","occ","Math","floor","nextProps","amountToDispense","despenseAmount","_this$state","denoKeys","denoElm","_evenElm","push","concat","React","Component","ATMDispenser","views_ATMDisplay","views_DispenseDetailDisplay","App","views_ATMDispenser","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f6fedc61.chunk.js","sourcesContent":["import React,{PureComponent} from \"react\";\r\n\r\n\r\nclass ATMDisplay extends PureComponent {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tamount:\"\"\r\n\t\t};\r\n\t\tthis.onChangeAmount = this.onChangeAmount.bind(this)\r\n\t\tthis.getMoney = this.getMoney.bind(this);\r\n\t\tthis.handleKeyDown = this.handleKeyDown.bind(this);\r\n\t}\r\n\tonChangeAmount(e){\r\n\t\tlet amount = e.target.value;\r\n\t\tif(/^[0-9]*$/.test(amount)){\r\n\t\t\tthis.setState({\r\n\t\t\t\tamount\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\talert(\"only whole numbers are allowed\")\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n\tgetMoney(e){\r\n\t\tthis.props.getMoney(e,this.state.amount);\r\n\t}\r\n\thandleKeyDown(e) {\r\n\t    if (e.key === 'Enter') {\r\n\t      this.getMoney(e);\r\n\t    }\r\n  \t}\r\n\r\n\r\n\trender(){\r\n\t\tconst {amount} = this.state;\r\n\t\treturn <div className=\"flex-1 center display-container\">\r\n\t\t\t<div className=\"flex column\">\r\n\t\t\t\t<h2 className=\"text-center\">Welcome to ATM</h2>\r\n\t\t\t\t<h6>Enter the Amount</h6>\r\n\t\t\t\t<input value={amount} type=\"number\" onChange={this.onChangeAmount} placeholder=\"0\" onKeyDown={this.handleKeyDown} />\r\n\t\t\t\t<button onClick={this.getMoney} className=\"top-space\">Get Money</button>\t\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t}\r\n\r\n}\r\n\r\nexport default ATMDisplay;","import React from \"react\";\r\n\r\n\r\nclass DispenseDetailDisplay extends React.Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tdenominations:{\r\n\t\t\t\t1:0,\r\n\t\t\t\t2:0,\r\n\t\t\t\t5:0,\r\n\t\t\t\t10:0,\r\n\t\t\t\t20:0,\r\n\t\t\t\t50:0,\r\n\t\t\t\t100:0,\r\n\t\t\t\t200:0,\r\n\t\t\t\t500:0,\r\n\t\t\t\t2000:0\r\n\t\t\t},\r\n\t\t\ttotalDispensedNotes:0\r\n\t\t};\r\n\t}\r\n\t\r\n\tdespenseAmount(amount){\r\n\t\tamount = parseInt(amount);\r\n\t\tlet totalDispensedNotes = 0;\r\n\t\tconst denominationsAvailable = Object.keys(this.state.denominations).sort(function(a, b){return b-a});\r\n\t\tfor (var i = 0; i < denominationsAvailable.length; i++) {\r\n\t\t\tif(amount >= denominationsAvailable[i]){\r\n\t\t\t\tlet occ = Math.floor(amount / denominationsAvailable[i]);\r\n\t\t\t\tamount = amount % denominationsAvailable[i];\r\n\t\t\t\tthis.state.denominations[denominationsAvailable[i]] = occ; /* No re rendering due to this*/\r\n\t\t\t\ttotalDispensedNotes+= occ;\r\n\t\t\t} else {\r\n\t\t\t\tthis.state.denominations[denominationsAvailable[i]] = 0;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t}\r\n\t\t/* this set state will call render and other denominations will also be diplayed */\r\n\t\tthis.setState({totalDispensedNotes});\r\n\r\n\t}\r\n\r\n\tcomponentWillReceiveProps(nextProps){\r\n\t\tif(nextProps.amountToDispense !== this.props.amountToDispense){\r\n\t\t\tthis.despenseAmount(nextProps.amountToDispense)\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tconst {denominations,totalDispensedNotes} = this.state;\r\n\t\tconst denoKeys = Object.keys(denominations);\r\n\t\tvar denoElm = [];\r\n\t\tfor(var i=0;i< denoKeys.length;i+=2){\r\n\t\t\tvar _evenElm = i+1 < denoKeys.length;\r\n\t\t\tdenoElm.push(<div className=\"flex flex-1 display-row\" key={`${i}__decs`}>\r\n\t\t\t\t<div className=\"flex-1\">{denominations[denoKeys[i]]} notes of Rs {denoKeys[i]}</div>\r\n\t\t\t\t{_evenElm && <div className=\"flex-1\">{denominations[denoKeys[i+1]]} notes of Rs {denoKeys[i+1]}</div>}\r\n\t\t\t</div>)\r\n\t\t}\r\n\t\treturn <div className=\"flex-1 column dispense-detail-container\">\r\n\t\t\t<h4>You will get following amount</h4>\r\n\t\t\t<div className=\"separator\" />\r\n\t\t\t<div className=\"flex column\">\r\n\t\t\t\t{denoElm}\r\n\t\t\t</div>\r\n\t\t\t<h4>Total notes dispensed: {totalDispensedNotes}</h4>\r\n\t\t</div>\t\r\n\t}\r\n\r\n}\r\n\r\nexport default DispenseDetailDisplay;","import React,{Component} from \"react\";\r\nimport ATMDisplay from \"./ATMDisplay\";\r\nimport DispenseDetailDisplay from \"./DispenseDetailDisplay\";\r\nimport ATMCSS from \"./ATM.css\";\r\n\r\nclass ATMDispenser extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tamountToDispense:0\r\n\t\t};\r\n\t\tthis.getMoney = this.getMoney.bind(this);\r\n\t}\r\n\r\n\tgetMoney(e,amountToDispense){\r\n\t\tthis.setState({\r\n\t\t\tamountToDispense\r\n\t\t});\r\n\t}\r\n\r\n\r\n\trender(){\r\n\t\tconst {amountToDispense} = this.state;\r\n\t\treturn <div className=\"container\">\r\n\t\t\t<h1 className=\"header\"> ATM Money Dispenser</h1>\t\r\n\t\t\t<div className=\"container flex\">\r\n\t\t\t\t<ATMDisplay getMoney={this.getMoney} />\r\n\t\t\t\t<DispenseDetailDisplay amountToDispense={amountToDispense} />\r\n\t\t\t</div>\r\n\t\t</div>\t\r\n\t}\r\n\r\n}\r\n\r\nexport default ATMDispenser;","import React from 'react';\n\nimport ATMDispenser from \"./views/ATMDispenser\"\n\nfunction App() {\n  return (<ATMDispenser/>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}